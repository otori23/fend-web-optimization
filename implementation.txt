
PageSpeed Insights - initial score
- Mobile: 28/100
- Desktop: 90/100 


I) Should Fix

1) Optimize images

Properly formatting and compressing images can save many bytes of data.

Optimize the following images to reduce their size by 2.3MiB (99% reduction).

Compressing and resizing http://aa852760.ngrok.io/views/images/pizzeria.jpg could save 2.3MiB (99% reduction).

Losslessly compressing http://aa852760.ngrok.io/img/profilepic.jpg could save 9.5KiB (67% reduction).
Hide details

Microsoft Office Picture Manager: 
Compress for the web:
Display Size: 115 X 75 [px]; Natural Size: 2048 X 1536 [px] - for pizzeria.jpg

jpegtran: optimize the compressed image

2) Eliminate render-blocking JavaScript and CSS in above-the-fold content

Your page has 1 blocking script resources and 3 blocking CSS resources. This causes a delay in rendering your page.

None of the above-the-fold content on your page could be rendered without waiting for the following resources to load. Try to defer or asynchronously load blocking resources, or inline the critical portions of those resources directly in the HTML.

Remove render-blocking JavaScript:

http://www.google-analytics.com/analytics.js
(use async attribute with script tag)

Optimize CSS Delivery of the following:

- http://fonts.googleapis.com/css?family=Open+Sans:400,700
(totally remove from crp by adding this style sheet dynamically using js.)
(the stylesheet is loaded after first render)

- http://aa852760.ngrok.io/css/style.css
(make inline; eliminates network round trip; this stylesheet is critical for the above the fold content)

- http://aa852760.ngrok.io/css/print.css 
(use media attribute on link tag; i.e. media="print")

II) Consider Fixing

1) Leverage browser caching

Setting an expiry date or a maximum age in the HTTP headers for static resources instructs the browser to load previously downloaded resources from local disk rather than over the network.

Leverage browser caching for the following cacheable resources:

http://aa852760.ngrok.io/css/print.css (expiration not specified)
http://aa852760.ngrok.io/css/style.css (expiration not specified)
http://aa852760.ngrok.io/img/profilepic.jpg (expiration not specified)
http://aa852760.ngrok.io/js/perfmatters.js (expiration not specified)
http://aa852760.ngrok.io/views/images/pizzeria.jpg (expiration not specified)
http://www.google-analytics.com/analytics.js (2 hours)

2) Enable compression

Compressing resources with gzip or deflate can reduce the number of bytes sent over the network.

Enable compression for the following resources to reduce their transfer size by 2.3KiB (52% reduction).

Compressing http://aa852760.ngrok.io/ could save 1.4KiB (51% reduction).
Compressing http://aa852760.ngrok.io/css/style.css could save 861B (55% reduction).

3) Minify HTML
Compacting HTML code, including any inline JavaScript and CSS contained in it, can save many bytes of data and speed up download and parse times.

Minify HTML for the following resources to reduce their size by 643B (23% reduction).
Minifying http://aa852760.ngrok.io/ could save 643B (23% reduction).

Use www.willpeavy.com/minifier/ for minification

III) 5 Passed Rules

1) Avoid landing page redirects
Your page has no redirects. Learn more about avoiding landing page redirects.

2)Minify CSS
Your CSS is minified. Learn more about minifying CSS.

3) Minify JavaScript
Your JavaScript content is minified. Learn more about minifying JavaScript.

4) Prioritize visible content
You have the above-the-fold content properly prioritized. Learn more about prioritizing visible content.

5) Reduce server response time
Your server responded quickly. Learn more about server response time optimization.
Download optimized image, JavaScript, and CSS resources for this page.

IV) User Experience

Congratulations! No issues found.

1) Avoid plugins
Your page does not appear to use plugins, which would prevent content from being usable on many platforms. Learn more about the importance of avoiding plugins.

2) Configure the viewport
Your page specifies a viewport matching the device's size, which allows it to render properly on all devices. Learn more about configuring viewports.

3) Size content to viewport
The contents of your page fit within the viewport. Learn more about sizing content to the viewport.

4) Size tap targets appropriately
All of your page's links/buttons are large enough for a user to easily tap on a touchscreen. Learn more about sizing tap targets appropriately.

5) Use legible font sizes
The text on your page is legible. Learn more about using legible font sizes.




V) Browser Rendering Optimization 

1) 60 FPS on scroll

- on scroll, cache results of document.body.scrollTop outside of the for loop over .mover elements
- reduce # of moving pizzas from 200 to 50
- promote all .mover elements to their own layer - style.css
- on DOM load, cache img element of moving pizzas in an array for later use on scroll

2) Time to resize pizza less than 5 ms

- cache results of document.querySelectorAll(".randomPizzaContainer") in the changePizzaSizes function
- the determinDx function adds no value, therefore eliminate it
- for loop in changePizzaSizes funtion is causing FSL, get desired pizza width outside of the for loop, then batch style updates of pizza widths inside of the for loop


VI) TO DO

- Work on the git repos readme markdown ( add images, like in the office hours repo)
- don't forget the first part - i.e. initial render in under 1 sec
- play around with git to view plots of different revisions of repo
- copy relevant parts of the office hour repo - into my own repo
- Add comments to main.js and style.css
- How to use gulp (or other automation tool, to minify CSS and JS and do image optimization, and other stuff)
(see qr code sample)
- what is css hardware acceleration
- how does putting pizzas on their own layer improve the paint time of browser (i.e. offload painting to hardware)
(http://www.html5rocks.com/en/tutorials/speed/layers/)
- watch chris coyers thing.
- google developers optimization section work on finishing that.

VII) Revision based on Udacity feedback

1) pizzeria.jpg

- leave original pizzeria in place
- create new optimized verion pizzeria100x75.jpg
- rename reference in index.html to point to new optimized version

2) main.js

- lint it
- use document.getElementsByClassName() instead of document.querySelectorAll in changePizzaSizes function
- follow reset of instructors nitpicks